name: Build and Push Image PROD

on:
  push:
    branches:
      - main

jobs:

  check-and-delete-image:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_TEST_TAG: "-test"
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_REPOSITORY: ${{ github.event.repository.name }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Load version from pom.xml
        id: load_version
        run: |
          VERSION=$(sed -n 's/.*<version>\(.*\)<\/version>.*/\1/p' pom.xml | head -n 1)
          echo "Version in pom.xml is: $VERSION"
          echo "DOCKER_VERSION=$VERSION$DOCKER_IMAGE_TEST_TAG" >> $GITHUB_ENV

      - name: Print Docker version
        run: echo "Docker version is ${{ env.DOCKER_VERSION }}"

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Check if Docker image exists
        id: check_image
        run: |
          # Verifica si la imagen existe en Docker Hub
          if docker pull $DOCKER_USERNAME/$DOCKER_REPOSITORY:$DOCKER_VERSION; then
            echo "Imagen $DOCKER_USERNAME/$DOCKER_REPOSITORY:$DOCKER_VERSION existe, se procede a eliminar."
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "Imagen $DOCKER_USERNAME/$DOCKER_REPOSITORY:$DOCKER_VERSION no existe, continua la construcción."
            echo "exists=false" >> $GITHUB_ENV
          fi
      - name: Authenticate to Docker Hub
        if: env.exists == 'true' 
        run: |
          echo "Se ejecuta el siguiente curl para autenticar "
          response=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"$DOCKER_USERNAME\", \"password\": \"$DOCKER_PASSWORD\"}" https://hub.docker.com/v2/users/login/)
          token=$(echo "$response" | jq -r .token)
          
          if [ "$token" == "null" ] || [ -z "$token" ]; then
            echo "No se recibió respuesta válida del curl. Respuesta: $response"
            echo "bypass=true" >> $GITHUB_ENV
          else
            echo "Credenciales obtenidas: $response"
            echo "token=$token" >> $GITHUB_ENV
            echo "bypass=false" >> $GITHUB_ENV
          fi
      - name: Delete Docker image
        if: env.bypass == 'false' && env.exists == 'true'
        env:
          TOKEN: ${{ env.token }}
        run: |
          echo "Se ejecuta el siguiente curl: curl -s -H 'Authorization: JWT $TOKEN' -X DELETE https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/$DOCKER_REPOSITORY/tags/$DOCKER_VERSION/"
          response=$(curl -s -H "Authorization: JWT $TOKEN" -X DELETE "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/$DOCKER_REPOSITORY/tags/$DOCKER_VERSION/")
          echo "Resultado de la eliminación: $response"
        
      - name: Show bypass message
        if: env.bypass == 'true' && env.exists == 'true'
        run: |
          echo "Bypass activado. No se recibió token para autenticación en Docker Hub."

  build-prod:
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: ${{ github.event.repository.name }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      PORTS_EXP: ${{ secrets.PORTS_EXP }}
      ENV_DOCKER_NETWORK: ${{ secrets.ENV_DOCKER_NETWORK }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      
      - name: Load version from pom.xml
        id: load_version
        run: |
          VERSION=$(sed -n 's/.*<version>\(.*\)<\/version>.*/\1/p' pom.xml | head -n 1)
          echo "Version in pom.xml is: $VERSION"
          echo "DOCKER_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Print Docker version
        run: echo "Docker version is ${{ env.DOCKER_VERSION }}"
          
      - name: Give execute permission
        run: chmod +x install-libs.sh

      - name: Install dependencies
        run: |
          # Ejecutar el script para instalar las librerías
          ./install-libs.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build application.properties and docker-compose.yml
        run: | 
          cp application.properties.dist application.properties
          cp docker-compose.yml.dist docker-compose.yml


      - name: Replace values in application.properties and docker-compose.yml
        run: |
          sed -i 's/^encryption.secret-key=.*/encryption.secret-key=${{ secrets.ENCRYPTION_SECRET_KEY }}/' application.properties
          sed -e "s/SERVICE_NAME/${{ env.SERVICE_NAME }}/g" \
              -e "s/DOCKER_USERNAME/$DOCKER_USERNAME/g" \
              -e "s/DOCKER_VERSION/${{ env.DOCKER_VERSION }}/g" \
              -e "s/PORTS_EXP/$PORTS_EXP/g" \
              -e "s/ENV_DOCKER_NETWORK/$ENV_DOCKER_NETWORK/g" \
              docker-compose.yml.dist > docker-compose.yml

      - name: Build the Java project
        run: mvn clean package

      - name: Build multi-platform Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:${{ env.DOCKER_VERSION }}
          build-args: |
            DOCKER_VERSION=${{ env.DOCKER_VERSION }}
          platforms: linux/amd64,linux/arm64

      - name: Cleanup
        run: |
          docker buildx prune --all --force

  create-tag:
    runs-on: ubuntu-latest
    needs: 
      - build-prod
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Load version from pom.xml
        id: load_version
        run: |
          VERSION=$(sed -n 's/.*<version>\(.*\)<\/version>.*/\1/p' pom.xml | head -n 1)
          echo "Version in pom.xml is: $VERSION"
          echo "DOCKER_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$DOCKER_VERSION" -m "Release version $DOCKER_VERSION"
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Push Tag to Repository
        run: |
          git push -f git@github.com:edw-rys/${{ github.event.repository.name }}.git "v$DOCKER_VERSION"
