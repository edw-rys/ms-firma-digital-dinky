name: Build and Push Image TEST

on:
  pull_request:
    branches:
      - main
      - test

jobs:

  validate-commits:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch PR commits
        run: |
          git fetch origin
          PR_COMMITS=$(git log origin/main..HEAD --no-merges --oneline | wc -l)
          echo "Commits in this pull request: $PR_COMMITS"
          git log --oneline --graph --decorate --all  
          if [ "$PR_COMMITS" -ne 1 ]; then
            echo "Error: The pull request must contain exactly one commit with this command: git reset HEAD^ --soft"
            exit 1
          fi
      - name: Success message
        run: echo "Pull request has exactly one commit. Validation passed."

  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.load_version.outputs.version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Load version from pom.xml
        id: load_version
        run: |
          VERSION=$(sed -n 's/.*<version>\(.*\)<\/version>.*/\1/p' pom.xml | head -n 1)
          echo "Version in pom.xml is: $VERSION"
          echo "DOCKER_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Print Docker version
        run: echo "Docker version is ${{ env.DOCKER_VERSION }}"


      - name: Validate Version
        run: |
          # Fetch all branches, including main
          git fetch origin main
          
          # Get the version from main branch using sed
          MAIN_VERSION=$(git show origin/main:pom.xml | sed -n 's/.*<version>\(.*\)<\/version>.*/\1/p' | head -n 1)
          
          # Get the current version from the current branch
          VERSION=$(sed -n 's/.*<version>\(.*\)<\/version>.*/\1/p' pom.xml | head -n 1)
          
          # Check if either version extraction failed
          if [ -z "$MAIN_VERSION" ] || [ -z "$VERSION" ]; then
            echo "Failed to extract version from pom.xml. Check if the file exists and has a <version> tag."
            exit 1
          fi

          # Compare versions
          if [ "$(printf "%s\n%s" "$MAIN_VERSION" "$VERSION" | sort -V | head -n1)" != "$VERSION" ]; then
            echo "Version is valid"
          else
            echo "Version $VERSION must be greater than $MAIN_VERSION. Please update the version in pom.xml."
            exit 1
          fi

  build-test:
    runs-on: ubuntu-latest
    needs: 
      - validate-version
      - validate-commits
    env:
      SERVICE_NAME: ${{ github.event.repository.name }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      PORTS_EXP: ${{ secrets.PORTS_EXP }}
      ENV_DOCKER_NETWORK: ${{ secrets.ENV_DOCKER_NETWORK }}
      DOCKER_IMAGE_TEST_TAG: "-test"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      
      - name: Load version from pom.xml
        id: load_version
        run: |
          VERSION=$(sed -n 's/.*<version>\(.*\)<\/version>.*/\1/p' pom.xml | head -n 1)
          echo "Version in pom.xml is: $VERSION"
          echo "DOCKER_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Print Docker version
        run: echo "Docker version is ${{ env.DOCKER_VERSION }}${{ env.DOCKER_IMAGE_TEST_TAG}}"
          
      - name: Give execute permission
        run: chmod +x install-libs.sh

      - name: Install dependencies
        run: |
          # Ejecutar el script para instalar las librerÃ­as
          ./install-libs.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build application.properties and docker-compose.yml
        run: | 
          cp application.properties.dist application.properties
          cp docker-compose.yml.dist docker-compose.yml


      - name: Replace values in application.properties and docker-compose.yml
        run: |
          sed -i 's/^encryption.secret-key=.*/encryption.secret-key=${{ secrets.ENCRYPTION_SECRET_KEY }}/' application.properties
          sed -e "s/SERVICE_NAME/${{ env.SERVICE_NAME }}/g" \
              -e "s/DOCKER_USERNAME/$DOCKER_USERNAME/g" \
              -e "s/DOCKER_VERSION/${{ env.DOCKER_VERSION }}${{ env.DOCKER_IMAGE_TEST_TAG}}/g" \
              -e "s/PORTS_EXP/$PORTS_EXP/g" \
              -e "s/ENV_DOCKER_NETWORK/$ENV_DOCKER_NETWORK/g" \
              docker-compose.yml.dist > docker-compose.yml

      - name: Build the Java project
        run: mvn clean package

      - name: Build multi-platform Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: | 
            ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:${{ env.DOCKER_VERSION }}${{ env.DOCKER_IMAGE_TEST_TAG}}
          build-args: |
            DOCKER_VERSION=${{ env.DOCKER_VERSION }}
          platforms: linux/amd64,linux/arm64

      - name: Cleanup
        run: |
          docker buildx prune --all --force
